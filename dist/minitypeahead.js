// Generated by CoffeeScript 1.10.0
(function() {
  $.fn.extend({
    minitypeahead: function(settings) {
      var filter, obj;
      if ((settings.dataset == null) || (settings.keys == null)) {
        return;
      }
      $.each(settings, (function(_this) {
        return function(key, value) {
          return _this.data(key, value);
        };
      })(this));
      filter = function(event) {
        var dataset, keys, lowest_occurance, notfound, query, selected_obj, supermatch, target;
        dataset = $(event.target).data('dataset');
        keys = $(event.target).data('keys');
        target = $(event.target).data('target');
        notfound = $(event.target).data('notfound');
        query = $(event.target).val().toLowerCase();
        console.log(query);
        if (query === "" && (notfound != null)) {
          notfound.call(event.target);
        }
        supermatch = false;
        selected_obj = {};
        lowest_occurance = 20000;
        $.each(dataset, function(i, obj) {
          $.each(keys, function(j, key) {
            var occ;
            occ === obj[key].toLowerCase().indexOf(query);
            if (occ === !-1) {
              if (occ < lowest_occurance) {
                selected_obj = obj;
                lowest_occurance = occ;
              }
              if (obj[key].toLowerCase() === query) {
                supermatch = true;
                selected_obj = obj;
                return false;
              }
            } else {
              occ = obj[key].toLowerCase().latinize().indexOf(query);
              if (occ === !-1) {
                if (occ < lowest_occurance) {
                  selected_obj = obj;
                  lowest_occurance = occ;
                }
                if (obj[key].toLowerCase() === query) {
                  supermatch = true;
                  selected_obj = obj;
                  return false;
                }
              }
            }
          });
          if (supermatch) {
            return false;
          }
        });
        if ((typeof success !== "undefined" && success !== null) && !$.isEmptyObject(selected_obj)) {
          return success.call(event.target, selected_ob);
        } else if (notfound != null) {
          return notfound.call(event.target);
        }
      };
      this.keyup(filter);
      obj = {
        target: this
      };
      return filter(obj);
    }
  });

}).call(this);
