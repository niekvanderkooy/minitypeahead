// Generated by CoffeeScript 1.10.0
$.fn.extend({
  minitypeahead: function(settings) {
    var filter, master_array, obj;
    if ((settings.dataset == null) || (settings.keys == null)) {
      return;
    }
    $.each(settings, (function(_this) {
      return function(key, value) {
        if (key !== 'dataset') {
          return _this.data(key, value);
        }
      };
    })(this));
    master_array = [];
    $.each(settings.keys, (function(_this) {
      return function(i, keyname) {
        master_array[keyname] = [];
        return $.each(settings.dataset, function(j, object) {
          var index, l, pre_key, ref, ref1, results, str;
          pre_key = object[keyname].toLowerCase().latinize().split(" ");
          $.each(pre_key, function(k, str) {
            var index, l, ref, results;
            results = [];
            for (index = l = 1, ref = str.length; l <= ref; index = l += 1) {
              results.push((function(index) {
                var key;
                key = str.substring(0, index);
                if (master_array[keyname][key] == null) {
                  master_array[keyname][key] = [];
                }
                return master_array[keyname][key].push(object);
              })(index));
            }
            return results;
          });
          str = pre_key.join(" ");
          results = [];
          for (index = l = ref = pre_key[0].length, ref1 = str.length; l <= ref1; index = l += 1) {
            results.push((function(index) {
              var key;
              key = str.substring(0, index);
              if (master_array[keyname][key] == null) {
                master_array[keyname][key] = [];
              }
              return master_array[keyname][key].push(object);
            })(index));
          }
          return results;
        });
      };
    })(this));
    this.data('dataset', master_array);
    filter = function(event) {
      var dataset, keys, lowest_occurance, notfound, query, returnset, success, supermatch, target;
      keys = $(event.target).data('keys');
      dataset = $(event.target).data('dataset');
      target = $(event.target).data('target');
      notfound = $(event.target).data('notfound');
      success = $(event.target).data('success');
      query = $(event.target).val().toLowerCase().latinize();
      if (query.length < 2) {
        if (notfound != null) {
          notfound.call(event.target);
        }
        return;
      }
      supermatch = false;
      returnset = [];
      lowest_occurance = 20000;
      $.each(keys, function(i, key) {
        if (master_array[key][query] != null) {
          return returnset.concat(master_array[key][query]);
        }
      });
      if ((success != null) && returnset !== []) {
        return success.call(event.target, returnset);
      } else if (notfound != null) {
        return notfound.call(event.target);
      }
    };
    this.keyup(filter);
    obj = {
      target: this
    };
    return filter(obj);
  }
});
